[{"title":"Spring AOP","url":"http://example.com/2020/12/07/Spring AOP/","content":"配置xml配置&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;\n\nspring中基于XML的AOP配置步骤　　1、把通知Bean也交给spring来管理　　2、使用aop:config标签表明开始AOP的配置　　3、使用aop:aspect标签表明配置切面　　　　id属性：是给切面提供一个唯一标识　　　　ref属性：是指定通知类bean的Id。　　4、在aop:aspect标签的内部使用对应标签来配置通知的类型　　　　我们现在示例是让printLog方法在切入点方法执行之前之前：所以是前置通知　　　　aop:before：表示配置前置通知　　　　　　method属性：用于指定Logger类中哪个方法是前置通知　　　　　　pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强\n　　切入点表达式的写法：　　　　关键字：execution(表达式)　　　　表达式：　　　　　　访问修饰符  返回值  包名.包名.包名…类名.方法名(参数列表)　　　　标准的表达式写法：　　　　　　public void com.itheima.service.impl.AccountServiceImpl.saveAccount()　　　　访问修饰符可以省略　　　　　　void com.itheima.service.impl.AccountServiceImpl.saveAccount() 　　　返回值可以使用通配符，表示任意返回值　　　　　　＊* com.itheima.service.impl.AccountServiceImpl.saveAccount()　　　　包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.　　　　　　＊* ＊*.＊*.＊*.＊*.AccountServiceImpl.saveAccount())　　　　包名可以使用..表示当前包及其子包　　　　　　＊* ＊＊*..AccountServiceImpl.saveAccount()　　　　类名和方法名都可以使用来实现通配　　　　　　＊ ＊*..＊*.＊*()　　　　参数列表：　　　　　　可以直接写数据类型：　　　　　　基本类型直接写名称           int　　　　　　引用类型写包名.类名的方式   java.lang.String　　　　　　可以使用通配符表示任意类型，但是必须有参数　　　　　　可以使用..表示有无参数均可，有参数可以是任意类型　　　　全通配写法：　　　　　　＊* ＊*..＊*.＊*(..)\n　　　实际开发中切入点表达式的通常写法：　　　　　　切到业务层实现类下的所有方法　　　　　　＊* com.itheima.service.impl..(..)\nxml配置&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;    &lt;!-- 配置srping的Ioc,把service对象配置进来--&gt;    &lt;bean id=&quot;accountService&quot; class=&quot;com.itheima.service.impl.AccountServiceImpl&quot;&gt;&lt;/bean&gt;    &lt;!-- 配置Logger类 --&gt;    &lt;bean id=&quot;logger&quot; class=&quot;com.itheima.utils.Logger&quot;&gt;&lt;/bean&gt;    &lt;!--配置AOP--&gt;    &lt;aop:config&gt;        &lt;!-- 配置切入点表达式 id属性用于指定表达式的唯一标识。expression属性用于指定表达式内容              此标签写在aop:aspect标签内部只能当前切面使用。              它还可以写在aop:aspect外面，此时就变成了所有切面可用          --&gt;        &lt;aop:pointcut id=&quot;pt1&quot; expression=&quot;execution(* com.itheima.service.impl.*.*(..))&quot;&gt;&lt;/aop:pointcut&gt;        &lt;!--配置切面 --&gt;        &lt;aop:aspect id=&quot;logAdvice&quot; ref=&quot;logger&quot;&gt;              &lt;!--配置前置通知：在切入点方法执行之前执行--&gt;            &lt;aop:before method=&quot;beforePrintLog&quot; pointcut-ref=&quot;pt1&quot; &gt;&lt;/aop:before&gt;            &lt;!--配置后置通知：在切入点方法正常执行之后值。它和异常通知永远只能执行一个--&gt;            &lt;aop:after-returning method=&quot;afterReturningPrintLog&quot; pointcut-ref=&quot;pt1&quot;&gt;&lt;/aop:after-returning&gt;             &lt;!--配置异常通知：在切入点方法执行产生异常之后执行。它和后置通知永远只能执行一个--&gt;            &lt;aop:after-throwing method=&quot;afterThrowingPrintLog&quot; pointcut-ref=&quot;pt1&quot;&gt;&lt;/aop:after-throwing&gt;            &lt;!--配置最终通知：无论切入点方法是否正常执行它都会在其后面执行--&gt;            &lt;aop:after method=&quot;afterPrintLog&quot; pointcut-ref=&quot;pt1&quot;&gt;&lt;/aop:after&gt;        &lt;/aop:aspect&gt;    &lt;/aop:config&gt;&lt;/beans&gt;\n\n环绕通知问题：　　当我们配置了环绕通知之后，切入点方法没有执行，而通知方法执行了。分析：　　通过对比动态代理中的环绕通知代码，发现动态代理的环绕通知有明确的切入点方法调用，而我们的代码中没有。解决：　　Spring框架为我们提供了一个接口：ProceedingJoinPoint。该接口有一个方法　proceed()，此方法就相当于明确调用切入点方法。　　该接口可以作为环绕通知的方法参数，在程序执行时，spring框架会为我们提供该接口的实现类供我们使用。spring中的环绕通知：　　它是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式。\nJava代码public class Logger &#123;    public Object aroundPringLog(ProceedingJoinPoint pjp)&#123;        Object rtValue = null;        try&#123;            Object[] args = pjp.getArgs();//得到方法执行所需的参数            System.out.println(&quot;Logger类中的aroundPringLog方法开始记录日志了。。。前置&quot;);            rtValue = pjp.proceed(args);//明确调用业务层方法（切入点方法）            System.out.println(&quot;Logger类中的aroundPringLog方法开始记录日志了。。。后置&quot;);            return rtValue;        &#125;catch (Throwable t)&#123;            System.out.println(&quot;Logger类中的aroundPringLog方法开始记录日志了。。。异常&quot;);            throw new RuntimeException(t);        &#125;finally &#123;            System.out.println(&quot;Logger类中的aroundPringLog方法开始记录日志了。。。最终&quot;);        &#125;    &#125;&#125;\n\nXml配置&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;    &lt;!-- 配置srping的Ioc,把service对象配置进来--&gt;    &lt;bean id=&quot;accountService&quot; class=&quot;com.itheima.service.impl.AccountServiceImpl&quot;&gt;&lt;/bean&gt;    &lt;!-- 配置Logger类 --&gt;    &lt;bean id=&quot;logger&quot; class=&quot;com.itheima.utils.Logger&quot;&gt;&lt;/bean&gt;    &lt;!--配置AOP--&gt;    &lt;aop:config&gt;        &lt;aop:pointcut id=&quot;pt1&quot; expression=&quot;execution(* com.itheima.service.impl.*.*(..))&quot;&gt;&lt;/aop:pointcut&gt;        &lt;!--配置切面 --&gt;        &lt;aop:aspect id=&quot;logAdvice&quot; ref=&quot;logger&quot;&gt;            &lt;!--配置环绕通知 详细的注释请看Logger类中--&gt;            &lt;aop:around method=&quot;aroundPringLog&quot; pointcut-ref=&quot;pt1&quot;&gt;&lt;/aop:around&gt;        &lt;/aop:aspect&gt;    &lt;/aop:config&gt;&lt;/beans&gt;\n\n","categories":["Java"],"tags":[]}]